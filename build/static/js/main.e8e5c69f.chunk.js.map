{"version":3,"sources":["assets/icons/chevron_right-24px.svg","assets/icons/highlight_off-24px.svg","config/constants.js","utils/Emitter.js","utils/ScreenSizeTracker.js","components/Sidebar.js","utils/SettingsProvider.js","components/Node.js","utils/sleep.js","components/Grid.js","components/Settings.js","algorithms/AStar/Node.js","algorithms/AStar/AStar.js","algorithms/Dijkstra/Node.js","algorithms/BreadthFirst/Node.js","algorithms/DepthFirst/Node.js","algorithms/AlgorithmProvider.js","algorithms/Dijkstra/Dijkstra.js","algorithms/BreadthFirst/BreadthFirst.js","algorithms/DepthFirst/DepthFirst.js","App.js","index.js"],"names":["module","exports","MAX_WIDTH_FOR_LAYOUT_CHANGE","ROWS_CONSTRAINT","COLUMNS_CONSTRAINT","STATES","WALKABLE","BLOCKED","START","END","PATH","CURRENT","OPEN","CLOSED","Color","c","Image","img","BACKGROUNDS","Arrow","Cross","Directions","Emitter","delegate","document","createDocumentFragment","forEach","f","maxWidth","handleResize","window","innerWidth","isSmall","dispatchEvent","CustomEvent","detail","addEventListener","Sidebar","state","ScreenSizeTracker","setState","this","ExpansionPanel","className","ExpansionPanelSummary","Typography","ExpansionPanelDetails","props","children","React","Component","settings","algorithm","type","label","value","options","gridSetterState","heuristic","directions","framerate","step","nodeSize","min","max","clearGrid","color","variant","searchPath","set","key","invoke","Node","toggle","throttle","reset","newState","node","classList","add","timeout","setTimeout","remove","SettingsProvider","forceUpdate","clearTimeout","backgroundImage","backgroundColor","background","onMouseEnter","onMouseDown","onClick","style","width","NODE_BORDER_WIDTH","height","ref","t","Promise","resolve","Grid","indexToCoords","index","columns","Math","floor","coordsToIndex","x","y","createNewGrid","rows","grid","Array","fill","map","nodes","column","cell","startingPoint","endingPoint","initNewPath","shouldReset","includes","generateStartingPoint","toggleGridAtIndex","generateEndingPoint","showPath","path","a","point","sleep","handleClick","isMouseEnter","draggableStates","firstSetterState","setGridAtIndex","setterState","handleMouseEnter","isMouseDown","coords","parseInt","gridRef","flat","i","Settings","getDOMElement","setting","InputLabel","Select","onChange","e","handleChange","option","MenuItem","Button","container","spacing","item","xs","Slider","newValue","target","Input","margin","inputProps","Error","Object","entries","keys","length","FormControl","parentNode","equal","g","h","AStar","start","end","setFramerate","setHeuristic","heuristicNr","heuristics","setDirections","directionsNr","startNode","endNode","JSON","parse","stringify","openList","closedList","list","find","nodeInList","currentNode","currentNodeIndex","splice","push","current","dir","newOpenListNodes","child","getNodeInList","nodeInOpenList","newClosedListNode","abs","setDistance","distance","Infinity","parent","isInList","indexOfNodeInList","priorityQueue","console","log","shift","relativeDistance","sqrt","isInOpenList","indexOfNodeInOpenList","sort","nodeA","nodeB","isDiscovered","discoveredList","some","queue","newDiscoveredNodes","newNode","stack","pop","App","createRef","handleNextIteration","openNode","openNodeIndex","closedNodeIndex","calculatePath","pathFinder","algorithms","findPath","then","removeEventListener","alert","gridWrapper","clientWidth","clientHeight","display","ReactDOM","render","getElementById"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,gD,uNCM9BC,EAA8B,IAE9BC,EAAkB,GAClBC,EAAqB,GAErBC,EAAS,CAClBC,SAAU,EACVC,QAAS,EACTC,MAAO,EACPC,IAAK,EACLC,KAAM,EACNC,QAAS,EACTC,KAAM,EACNC,OAAQ,GAGNC,EAAQ,SAAAC,GAAC,MAAI,CAAC,QAASA,IACvBC,EAAQ,SAAAC,GAAG,MAAI,CAAC,QAASA,IAElBC,GAAW,mBACnBb,EAAOC,SAAWQ,EAAM,UADL,cAEnBT,EAAOE,QAAUO,EAAM,YAFJ,cAGnBT,EAAOG,MAAQQ,EAAM,OAAD,OAAQG,IAAR,OAHD,cAInBd,EAAOI,IAAMO,EAAM,OAAD,OAAQI,IAAR,OAJC,cAKnBf,EAAOK,KAAOI,EAAM,YALD,cAMnBT,EAAOM,QAAUG,EAAM,YANJ,cAOnBT,EAAOO,KAAOE,EAAM,YAPD,cAQnBT,EAAOQ,OAASC,EAAM,YARH,GAWXO,EAAa,CAEtB,CACc,CAAC,GAAI,GACf,EAAE,EAAI,GAAa,CAAC,EAAI,GACd,CAAC,EAAI,IAGnB,CACI,EAAE,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GACxB,EAAE,EAAI,GAAa,CAAC,EAAI,GACxB,EAAE,EAAI,GAAI,CAAC,EAAI,GAAI,CAAC,EAAI,K,oCC9CXC,EACnB,aAAe,IAAD,2BACZ,IAAIC,EAAWC,SAASC,yBACxB,CACE,mBACA,gBACA,uBACAC,SAAQ,SAAAC,GAAC,OACT,EAAKA,GAAK,kBAAWJ,EAASI,GAAT,MAAAJ,EAAQ,gBCapB,M,YAlBX,WAAYK,GAAU,IAAD,8BACjB,+CAMJC,aAAe,WACRC,OAAOC,WAAa7B,IAAgC,EAAK8B,SACxD,EAAKA,SAAU,EACf,EAAKC,cAAc,IAAIC,YAAY,iBAAkB,CAACC,OAAQ,CAACH,QAAS,EAAKA,aACxEF,OAAOC,WAAa7B,GAA+B,EAAK8B,UAC7D,EAAKA,SAAU,EACf,EAAKC,cAAc,IAAIC,YAAY,iBAAkB,CAACC,OAAQ,CAACH,QAAS,EAAKA,cAXjF,EAAKJ,SAAWA,EAChB,EAAKI,QAAUF,OAAOC,WAAW,EAAKH,SACtCE,OAAOM,iBAAiB,SAAU,EAAKP,cAJtB,E,2BADOP,GAmBjB,CAAsBpB,GCjBhBmC,E,2MACjBC,MAAQ,CAACN,QAASO,EAAkBP,S,mFAEhB,IAAD,OACfO,EAAkBH,iBAAiB,kBAAkB,gBAAED,EAAF,EAAEA,OAAF,OAAc,EAAKK,SAAS,CAACR,QAASG,EAAOH,e,+BAIlG,OAAIS,KAAKH,MAAMN,QAQP,kBAACU,EAAA,EAAD,CAAgBC,UAAU,mBACtB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,kBAEJ,kBAACC,EAAA,EAAD,KACKL,KAAKM,MAAMC,WAXpB,2BAAOL,UAAU,WACZF,KAAKM,MAAMC,c,GAXKC,IAAMC,W,iCCuH5B,M,2MAxHXC,SAAW,CACPC,UAAW,CACPC,KAAM,SACNC,MAAO,YACPC,MAAO,EACPC,QAAS,CACL,CACIF,MAAO,KACPC,MAAO,GAEX,CACID,MAAO,WACPC,MAAO,GAEX,CACID,MAAO,gBACPC,MAAO,GAEX,CACID,MAAO,cACPC,MAAO,KAKnBE,gBAAiB,CACbJ,KAAM,SACNC,MAAO,oBACPC,MAAOlD,EAAOE,QACdiD,QAAS,CACL,CACIF,MAAO,OACPC,MAAOlD,EAAOE,SAElB,CACI+C,MAAO,QACPC,MAAOlD,EAAOG,OAElB,CACI8C,MAAO,MACPC,MAAOlD,EAAOI,OAK1BiD,UAAW,CACPL,KAAM,SACNC,MAAO,YACPC,MAAO,EACPC,QAAS,CACL,CACIF,MAAO,YACPC,MAAO,GAEX,CACID,MAAO,WACPC,MAAO,GAEX,CACID,MAAO,YACPC,MAAO,KAKnBI,WAAY,CACRN,KAAM,SACNC,MAAO,qBACPC,MAAO,EACPC,QAAS,CACL,CACIF,MAAO,2BACPC,MAAO,GAEX,CACID,MAAO,iBACPC,MAAO,KAKnBK,UAAW,CACPP,KAAM,SACNE,MAAO,GACPM,KAAM,GACNP,MAAO,aAGXQ,SAAU,CACNT,KAAM,SACNE,MAAO,GACPQ,IAAK,GACLC,IAAK,IACLH,KAAM,GACNP,MAAO,aAGXW,UAAW,CACPZ,KAAM,SACNa,MAAO,YACPC,QAAS,WACTb,MAAO,cAGXc,WAAY,CACRf,KAAM,SACNa,MAAO,UACPC,QAAS,YACTb,MAAO,gB,EAIfe,IAAM,SAACC,EAAKf,GACR,EAAKJ,SAASmB,GAAKf,MAAQA,EAC3B,EAAKtB,cAAc,IAAIC,YAAYoC,EAAI,SAAU,CAACnC,OAAQ,EAAKgB,SAASmB,GAAKf,U,EAGjFgB,OAAS,SAAAD,GAAG,OAAI,EAAKrC,cAAc,IAAIC,YAAYoC,K,6BAtHxBhD,ICCVkD,E,2MACjBlC,MAAQ,CAACA,MAAO,EAAKS,MAAMT,O,EAE3BmC,OAAS,SAAAH,GACF,EAAKI,WACL,EAAKpC,MAAMA,QAAUgC,EACpB,EAAK9B,SAAS,CAACF,MAAOjC,EAAOC,WAE7B,EAAKkC,SAAS,CAACF,MAAOgC,M,EAI9BD,IAAM,SAAAC,GACC,EAAKhC,MAAMA,QAAUjC,EAAOG,OAAS,EAAK8B,MAAMA,QAAUjC,EAAOI,KAChE,EAAK+B,SAAS,CAACF,MAAOgC,K,EAI9BK,MAAQ,kBAAM,EAAKnC,SAAS,CAACF,MAAOjC,EAAOC,Y,wEAElCsE,GAAU,IAAD,OACd,gEAAeA,GACZA,EAAStC,QAAUjC,EAAOC,WACzBmC,KAAKoC,KAAKC,UAAUC,IAAI,WACxBtC,KAAKuC,QAAUC,YAAW,kBAAM,EAAKJ,KAAKC,UAAUI,OAAO,aAAY,Q,0CAI3D,IAAD,OACfC,EAAiB/C,iBAAiB,kBAAkB,kBAAM,EAAKgD,mB,6CAI5D3C,KAAKuC,SACJK,aAAa5C,KAAKuC,W,+BAIjB,IAC2CM,EAAiBC,EAD7D,OACAC,EAAatE,EAAYuB,KAAKH,MAAMA,OASxC,MAPqB,UAAlBkD,EAAW,IACVF,EAAkBE,EAAW,GAC7BD,EAAkBrE,EAAYb,EAAOK,MAAM,IACpB,UAAlB8E,EAAW,KAChBD,EAAkBC,EAAW,IAI7B,yBACI7C,UAAU,cACV8C,aAAchD,KAAKM,MAAM0C,aACzBC,YAAajD,KAAKM,MAAM4C,SAExB,yBACIhD,UAAU,OACViD,MAAO,CACHC,MAAOV,EAAiBhC,SAASW,SAASP,MAAMuC,EAAoB,KACpEC,OAAQZ,EAAiBhC,SAASW,SAASP,MAAMuC,EAAoB,KACrER,kBACAC,mBAEJS,IAAK,SAAAA,GAAG,OAAI,EAAKnB,KAAOmB,IAC1BvD,KAAKM,MAAMC,e,GA/DKC,IAAMC,WCJzB,WAAA+C,GAAC,OAAI,IAAIC,SAAQ,SAAAC,GAAO,OAAIlB,WAAWkB,EAASF,OCO1CG,E,YAGjB,WAAYrD,GAAO,IAAD,8BACd,4CAAMA,KAQVsD,cAAgB,SAAAC,GAAK,MAAI,CAACA,EAAM,EAAKvD,MAAMwD,QAASC,KAAKC,MAAMH,EAAM,EAAKvD,MAAMwD,WAT9D,EAUlBG,cAAgB,gBAAEC,EAAF,EAAEA,EAAF,SAAIC,EAAS,EAAK7D,MAAMwD,QAAQI,GAV9B,EAYlBE,cAAgB,WACZ,EAAK5C,YACL,IAAM6C,EAAON,KAAKzC,IAAI,EAAKhB,MAAM+D,KAAM3G,GACjCoG,EAAUC,KAAKzC,IAAI,EAAKhB,MAAMwD,QAASnG,GAC7C,EAAK2G,KAAOC,MAAMF,GAAMG,KAAK,GAAGC,KAAI,kBAAMF,MAAMT,GAASU,KAAK5G,EAAOC,cAhBvD,EAmBlB2D,UAAY,WACL,EAAKkD,QACJ,EAAKA,MAAMzF,SAAQ,SAAAmD,GAAI,OAAIA,GAAQA,EAAKF,WACxC,EAAKoC,KAAO,EAAKA,KAAKG,KAAI,SAAAE,GAAM,OAAIA,EAAOF,KAAI,SAAAG,GAAI,OAAWhH,EAAOC,eACrE,EAAKgH,cAAgB,KACrB,EAAKC,YAAc,OAxBT,EA4BlBC,YAAc,WACV,IAAMC,EAAc,CAACpH,EAAOK,KAAML,EAAOM,QAASN,EAAOO,KAAMP,EAAOQ,QACtE,EAAKkG,KAAO,EAAKA,KAAKG,KAAI,SAACE,EAAQR,GAAT,OAAeQ,EAAOF,KAAK,SAACG,EAAMV,GACxD,IAAML,EAAQ,EAAKI,cAAc,CAACC,IAAEC,MACpC,OAAGN,IAAU,EAAKgB,cACPjH,EAAOG,MACf8F,IAAU,EAAKiB,YACPlH,EAAOI,IACfgH,EAAYC,SAASL,IACpB,EAAKF,MAAMb,GAAO3B,QACXtE,EAAOC,UAEX+G,SAxCG,EA4ClBM,sBAAwB,WACpB,KAAG,EAAK5E,MAAMwD,QAAUnG,GAAsB,EAAK2C,MAAM+D,KAAO3G,GAAhE,CACA,IAAMwG,EAAIH,KAAKC,MAAyB,GAAnB,EAAK1D,MAAMwD,SAC1BK,EAAIJ,KAAKC,MAAM,EAAK1D,MAAM+D,KAAK,GACrC,EAAKQ,cAAgB,EAAKZ,cAAc,CAACC,IAAGC,MAC5C,EAAKgB,kBAAkB,EAAKN,cAAejH,EAAOG,SAjDpC,EAoDlBqH,oBAAsB,WAClB,KAAG,EAAK9E,MAAMwD,QAAUnG,GAAsB,EAAK2C,MAAM+D,KAAO3G,GAAhE,CACA,IAAMwG,EAAIH,KAAKC,MAAyB,GAAnB,EAAK1D,MAAMwD,SAC1BK,EAAIJ,KAAKC,MAAM,EAAK1D,MAAM+D,KAAK,GACrC,EAAKS,YAAc,EAAKb,cAAc,CAACC,IAAGC,MAC1C,EAAKgB,kBAAkB,EAAKL,YAAalH,EAAOI,OAzDlC,EA4ElBqH,SA5EkB,uCA4EP,WAAMC,GAAN,yBAAAC,EAAA,oFACUD,EADV,yEACCE,EADD,QAEH,EAAKlB,KAAKkB,EAAM,IAAIA,EAAM,IAAM,EAChC,EAAKd,MAAM,EAAKT,cAAc,CAACC,EAAEsB,EAAM,GAAIrB,EAAEqB,EAAM,MAAM5D,IAAIhE,EAAOK,MAHjE,UAIGwH,EAAM,EAAE/C,EAAiBhC,SAASS,UAAUL,MAAM,KAJrD,iVA5EO,wDAoFlB4E,YAAc,SAAC7B,GAAiC,IAA1B8B,EAAyB,wDACrC/D,EAAM,SAACiC,EAAOhE,GACZ8F,EAEKhC,EAAKiC,gBAAgBX,SAASpF,KACN,OAA1B,EAAKgG,mBACJ,EAAKA,iBAAmB,EAAKnB,MAAMb,GAAOhE,MAAMA,QAAUjC,EAAOE,SAElE,EAAK+H,iBACJ,EAAKC,eAAejC,EAAOhE,GAE3B,EAAKiG,eAAejC,EAAOjG,EAAOC,WARtC,EAAKsH,kBAAkBtB,EAAOhE,IAanC,EAAKkG,cAAgBnI,EAAOG,OACxB,EAAK8G,eACJjD,EAAI,EAAKiD,cAAejH,EAAOG,OAEnC,EAAK8G,cAAgBhB,GACf,EAAKkC,cAAgBnI,EAAOI,MAC/B,EAAK8G,aACJlD,EAAI,EAAKkD,YAAalH,EAAOI,KAEjC,EAAK8G,YAAcjB,GAEvBjC,EAAIiC,EAAO,EAAKkC,cA/GF,EAkHlBC,iBAAmB,SAAAnC,GACZ,EAAKoC,aACJ,EAAKP,YAAY7B,GAAO,IAlH5B,EAAKO,gBACL,EAAK2B,YAAcnI,EAAOE,QAC1B,EAAK4G,MAAQ,GACb,EAAKuB,aAAc,EACnB,EAAKJ,iBAAmB,KANV,E,+EA4DAhC,EAAO/C,GACrB,IAAMoF,EAASlG,KAAK4D,cAAcC,GAClC7D,KAAK0E,MAAMb,GAAO7B,OAAOlB,GACtBd,KAAKsE,KAAK4B,EAAO,IAAIA,EAAO,MAAQC,SAASrF,GAC5Cd,KAAKsE,KAAK4B,EAAO,IAAIA,EAAO,IAAMtI,EAAOC,SAEzCmC,KAAKsE,KAAK4B,EAAO,IAAIA,EAAO,IAAMC,SAASrF,K,qCAIpC+C,EAAO/C,GAClB,IAAMoF,EAASlG,KAAK4D,cAAcC,GAClC7D,KAAKsE,KAAK4B,EAAO,IAAIA,EAAO,IAAMpF,EAClCd,KAAK0E,MAAMb,GAAOjC,IAAId,K,2CAgDtBd,KAAKkF,wBACLlF,KAAKoF,wB,0CAGW,IAAD,OACfrG,SAASY,iBAAiB,aAAa,kBAAM,EAAKsG,aAAc,KAAM,GACtElH,SAASY,iBAAiB,WAAW,WACjC,EAAKkG,iBAAmB,KACxB,EAAKI,aAAc,KAGvBvD,EAAiB/C,iBAAiB,yBAAyB,gBAAED,EAAF,EAAEA,OAAF,OAAc,EAAKqG,YAAcI,SAASzG,MACrGgD,EAAiB/C,iBAAiB,kBAAkB,kBAAM,EAAKgD,iBAC/DD,EAAiB/C,iBAAiB,YAAaK,KAAKwB,WAEpDxB,KAAKkF,wBACLlF,KAAKoF,wB,+BAGA,IAAD,OAEJ,OADApF,KAAKoE,gBAED,yBACIlE,UAAU,OACVqD,IAAK,SAAAA,GAAG,OAAI,EAAK6C,QAAU7C,GAC3BJ,MAAO,CAACC,MAAOpD,KAAKM,MAAMwD,QAAQpB,EAAiBhC,SAASW,SAASP,QAEpEd,KAAKsE,KAAK+B,OAAO5B,KAAI,SAAC5E,EAAOyG,GAAR,OAClB,kBAAC,EAAD,CACIzG,MAAOA,EACPgC,IAAKyE,EACLpD,QAAS,kBAAM,EAAKwC,YAAYY,IAChC/C,IAAK,SAAAA,GAAG,OAAI,EAAKmB,MAAM4B,GAAK/C,GAC5BP,aAAc,kBAAM,EAAKgD,iBAAiBM,MPjKxC,W,GOIQ9F,IAAMC,WAAnBkD,EACViC,gBAAkB,CAAChI,EAAOC,SAAUD,EAAOE,S,oFCHjCyI,E,2MACjB1G,MAAQ,G,EAER2G,cAAgB,SAAA3E,GACZ,IAAM4E,EAAU/D,EAAiBhC,SAASmB,GAE1C,OAAO4E,EAAQ7F,MACX,IAAK,SACD,OACI,oCACI,kBAAC8F,EAAA,EAAD,KAAaD,EAAQ5F,OACrB,kBAAC8F,EAAA,EAAD,CACI7F,MAAO,EAAKjB,MAAMgC,GAClB+E,SAAU,SAAAC,GAAC,OAAI,EAAKC,aAAaD,EAAGhF,IACpC3B,UAAU,SAETuG,EAAQ1F,QAAQ0D,KAAI,SAAAsC,GAAM,OACvB,kBAACC,EAAA,EAAD,CAAUlG,MAAOiG,EAAOjG,MAAOe,IAAKkF,EAAOlG,OAAQkG,EAAOlG,YAM9E,IAAK,SACD,OACI,kBAACoG,EAAA,EAAD,CACI/G,UAAU,QACVwB,QAAS+E,EAAQ/E,QACjBD,MAAOgF,EAAQhF,MACfyB,QAAS,kBAAMR,EAAiBZ,OAAOD,KACzC4E,EAAQ5F,OAGlB,IAAK,SACD,OACI,oCACI,kBAAC6F,EAAA,EAAD,KAAaD,EAAQ5F,OACrB,kBAAC,IAAD,CAAMqG,WAAS,EAACC,QAAS,EAAGjH,UAAU,kBAClC,kBAAC,IAAD,CAAMkH,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CACIxG,MAAO,EAAKjB,MAAMgC,GAClB+E,SAAU,SAACC,EAAGU,GAAJ,OAAiB,EAAKT,aAAa,CAACU,OAAQ,CAAC1G,MAAOyG,IAAY1F,IAC1ET,KAAM,EACNE,IAAKmF,EAAQnF,IACbC,IAAKkF,EAAQlF,OAGrB,kBAAC,IAAD,CAAM6F,MAAI,GACN,kBAACK,EAAA,EAAD,CACI5G,MAAO4F,EAAQ5F,MACfC,MAAO,EAAKjB,MAAMgC,GAClB+E,SAAU,SAAAC,GAAC,OAAI,EAAKC,aAAaD,EAAGhF,IACpC6F,OAAO,QACPvE,MAAO,CAACC,MAAO,IACfuE,WAAY,CACRvG,KAAMqF,EAAQrF,KACdR,KAAM,eAQlC,QACI,MAAM,IAAIgH,MAAM,6BAA6BnB,EAAQ7F,Q,EAIjEkG,aAAe,SAACD,EAAGhF,GACfa,EAAiBd,IAAIC,EAAKgF,EAAEW,OAAO1G,OACnC,EAAKf,SAAL,eAAgB8B,EAAMgF,EAAEW,OAAO1G,S,mFAI/B,IAAIqB,EAAW,GACf0F,OAAOC,QAAQpF,EAAiBhC,UAAUzB,SAAQ,YAAqB,IAAD,mBAAlB4C,EAAkB,KAAb4E,EAAa,KAC9C,WAAjBA,EAAQ7F,MAAsC,WAAjB6F,EAAQ7F,OACpCuB,EAASN,GAAO4E,EAAQ3F,UAGhCd,KAAKD,SAASoC,K,+BAGT,IAAD,OACJ,OACI,yBAAKjC,UAAU,YACV2H,OAAOE,KAAK/H,KAAKH,OAAOmI,QAAUH,OAAOE,KAAKrF,EAAiBhC,UAAU+D,KAAI,SAAA5C,GAAG,OAC7E,yBAAK3B,UAAU,gBAAgB2B,IAAKA,GAChC,kBAACoG,EAAA,EAAD,CAAa/H,UAAU,SAClB,EAAKsG,cAAc3E,a,GA1FVrB,IAAMC,W,gBCLvBsB,EACjB,WAAYmC,EAAGC,GAAsB,IAAD,OAAlB+D,EAAkB,uDAAL,KAAK,yBAWpCC,MAAQ,SAAA/F,GAAI,OAAI,EAAK8B,IAAM9B,EAAK8B,GAAK,EAAKC,IAAM/B,EAAK+B,GAVjDnE,KAAKkE,EAAIA,EACTlE,KAAKmE,EAAIA,EAETnE,KAAKoI,EAAI,EACTpI,KAAKqI,EAAI,EACTrI,KAAKd,EAAI,EAETc,KAAKkI,WAAaA,GCJLI,G,YAUjB,WAAYC,EAAOC,EAAKlE,GAAM,IAAD,8BACzB,+CAWJmE,aAAe,SAAAtH,GAAS,OAAI,EAAKA,UAAYA,GAZhB,EAa7BuH,aAAe,SAAAC,GAAW,OAAI,EAAK1H,UAAYqH,EAAMM,WAAWD,IAbnC,EAc7BE,cAAgB,SAAAC,GAAY,OAAI,EAAK5H,WAAatC,EAAWkK,IAZzD,EAAKC,UAAL,YAAqBhH,EAArB,YAA6BwG,IAC7B,EAAKS,QAAL,YAAmBjH,EAAnB,YAA2ByG,IAC3B,EAAKlE,KAAO2E,KAAKC,MAAMD,KAAKE,UAAU7E,IACtC,EAAK8E,SAAW,CAAC,EAAKL,WACtB,EAAKM,WAAa,GAElB,EAAKX,aAAa,GAClB,EAAKG,cAAc,GATM,E,2EAgBfS,EAAMlH,GAChB,OAAOkH,EAAKC,MAAK,SAAAC,GAAU,OAAIA,EAAWrB,MAAM/F,Q,yLAI1CpC,KAAKoJ,SAASpB,O,iBAIhB,IAFIyB,EAAczJ,KAAKoJ,SAAS,GAC5BM,EAAmB,EACfpD,EAAI,EAAGA,EAAItG,KAAKoJ,SAASpB,OAAQ1B,IAClCtG,KAAKoJ,SAAS9C,GAAGpH,EAAIuK,EAAYvK,IAChCuK,EAAczJ,KAAKoJ,SAAS9C,GAC5BoD,EAAmBpD,G,GAK3BtG,KAAKoJ,SAASO,OAAOD,EAAkB,GACvC1J,KAAKqJ,WAAWO,KAAKH,IAGlBA,EAAYtB,MAAMnI,KAAKgJ,S,iBAItB,IAFI1D,EAAO,GACPuE,EAAUJ,EACRI,GACFvE,EAAKsE,KAAK,CAACC,EAAQ3F,EAAG2F,EAAQ1F,IAC9B0F,EAAUA,EAAQ3B,W,yBAEfzE,QAAQC,QAAQ4B,I,QAIvB/E,EAAW,G,+BAEAP,KAAKkB,W,sEAAZ4I,E,QAEA5F,EAAIuF,EAAYvF,EAAE4F,EAAI,GACtB3F,EAAIsF,EAAYtF,EAAE2F,EAAI,KAGvB5F,EAAI,GAAKC,EAAI,GACbD,GAAKlE,KAAKsE,KAAK,GAAG0D,QAAU7D,GAAKnE,KAAKsE,KAAK0D,Q,2DAIvB,IAApBhI,KAAKsE,KAAKH,GAAGD,G,wDAIhB3D,EAASqJ,KAAK,IAAI7H,EAAKmC,EAAGC,EAAGsF,I,+QAG3BM,EAAmB,G,MACRxJ,E,6CAATyJ,E,MAEDhK,KAAKiK,cAAcjK,KAAKqJ,WAAYW,G,2DAKvCA,EAAM5B,EAAIqB,EAAYrB,EAAI,EAC1B4B,EAAM3B,EAAIrI,KAAKiB,UAAU+I,EAAOhK,KAAKgJ,SACrCgB,EAAM9K,EAAI8K,EAAM5B,EAAI4B,EAAM3B,KAGtB6B,EAAiBlK,KAAKiK,cAAcjK,KAAKoJ,SAAUY,KAClCA,EAAM5B,GAAK8B,EAAe9B,G,wDAK/CpI,KAAKoJ,SAASQ,KAAKI,GACnBD,EAAiBH,KAAKI,G,uCAI1BhK,KAAKR,cAAc,IAAIC,YAAY,gBAAiB,CAACC,OAAQ,CACzD+J,cACAM,mBACAI,kBAAmBnK,KAAKqJ,WAAWrB,OAAO,GAAKhI,KAAKqJ,WAAWrJ,KAAKqJ,WAAWrB,OAAO,QAGvFhI,KAAKmB,U,kCACEsE,EAAM,EAAEzF,KAAKmB,UAAU,K,+JA9GVtC,GAAdyJ,GACVM,WAAa,CAEhB,SAACa,EAAaT,GAAd,OAA0BjF,KAAKqG,IAAIX,EAAYvF,EAAE8E,EAAQ9E,GAAGH,KAAKqG,IAAIX,EAAYtF,EAAE6E,EAAQ7E,IAE3F,SAACsF,EAAaT,GAAd,OAA0BjF,KAAKxC,IAAIwC,KAAKqG,IAAIX,EAAYvF,EAAE8E,EAAQ9E,GAAGH,KAAKqG,IAAIX,EAAYtF,EAAE6E,EAAQ7E,KAEpG,SAACsF,EAAaT,GAAd,gBAA2B,SAACS,EAAYvF,EAAE8E,EAAQ9E,EAAI,GAA3B,SAA8BuF,EAAYtF,EAAE6E,EAAQ7E,EAAI,GAAK,M,ICZ3EpC,GACjB,WAAYmC,EAAGC,EAAG+D,GAAY,IAAD,gCAO7BmC,YAAc,SAAAC,GAAQ,OAAI,EAAKA,SAAWA,GAPb,KAS7BnC,MAAQ,SAAA/F,GAAI,OAAI,EAAK8B,IAAM9B,EAAK8B,GAAK,EAAKC,IAAM/B,EAAK+B,GARjDnE,KAAKkE,EAAIA,EACTlE,KAAKmE,EAAIA,EACTnE,KAAKkI,WAAaA,EAClBlI,KAAKsK,SAAWC,KCLHxI,GACjB,WAAYmC,EAAGC,GAAG,IAAD,gCAMjBgE,MAAQ,SAAA/F,GAAI,OAAIA,EAAK8B,IAAM,EAAKA,GAAK9B,EAAK+B,IAAM,EAAKA,GALjDnE,KAAKkE,EAAIA,EACTlE,KAAKmE,EAAIA,EACTnE,KAAKwK,OAAS,MCJDzI,GACjB,WAAYmC,EAAGC,GAAG,IAAD,gCAMjBgE,MAAQ,SAAA/F,GAAI,OAAIA,EAAK8B,IAAM,EAAKA,GAAK9B,EAAK+B,IAAM,EAAKA,GALjDnE,KAAKkE,EAAIA,EACTlE,KAAKmE,EAAIA,EACTnE,KAAKwK,OAAS,MCCP,IAAClC,G,YCCZ,WAAYC,EAAOC,EAAKlE,GAAM,IAAD,8BACzB,+CAaJmE,aAAe,SAAAtH,GAAS,OAAI,EAAKA,UAAYA,GAdhB,EAe7B0H,cAAgB,SAAAC,GAAY,OAAI,EAAK5H,WAAatC,EAAWkK,IAfhC,EAkB7B2B,SAAW,SAACnB,EAAMlH,GACd,IAAI,IAAIsI,KAAqBpB,EAAK,CAC9B,IAAIE,EAAaF,EAAKoB,GACtB,GAAGlB,EAAWrB,MAAM/F,GAChB,MAAO,CAACoH,EAAYkB,GAG5B,OAAO,GAvBP,EAAK3B,UAAL,YAAqBhH,GAArB,YAA6BwG,IAC7B,EAAKQ,UAAUsB,YAAY,GAE3B,EAAKM,cAAgB,GACrB,EAAKvB,SAAW,CAAC,EAAKL,WACtB,EAAKM,WAAa,GAClB,EAAK/E,KAAO2E,KAAKC,MAAMD,KAAKE,UAAU7E,IACtCsG,QAAQC,IAAI,EAAKvG,MAEjB,EAAKuE,cAAc,GAXM,E,4NA6BnB7I,KAAKoJ,SAASpB,O,oBAEZyB,EAAczJ,KAAKoJ,SAAS,GAGhCpJ,KAAKoJ,SAAS0B,QACd9K,KAAKqJ,WAAWO,KAAKH,GACrBmB,QAAQC,IAAIpB,EAAazJ,KAAKsE,KAAKmF,EAAYtF,GAAGsF,EAAYvF,IAEf,IAA5ClE,KAAKsE,KAAKmF,EAAYtF,GAAGsF,EAAYvF,G,gBAEpC,IADIoB,EAAO,GACLmE,GACFnE,EAAKsE,KAAK,CAACH,EAAYvF,EAAGuF,EAAYtF,IACtCsF,EAAcA,EAAYvB,W,yBAEvBzE,QAAQC,QAAQ4B,I,OAIvByE,EAAmB,G,+BACR/J,KAAKkB,W,sEAAZ4I,E,QAEA5F,EAAIuF,EAAYvF,EAAE4F,EAAI,GACtB3F,EAAIsF,EAAYtF,EAAE2F,EAAI,KAGvB5F,EAAI,GAAKC,EAAI,GACbD,GAAKlE,KAAKsE,KAAK,GAAG0D,QAAU7D,GAAKnE,KAAKsE,KAAK0D,Q,2DAIvB,IAApBhI,KAAKsE,KAAKH,GAAGD,G,2DAIZ9B,EAAO,IAAIL,GAAKmC,EAAGC,EAAGsF,GACtBsB,EAAmBjB,EAAI,IAAMA,EAAI,GAAK/F,KAAKiH,KAAK,GAAK,EACzD5I,EAAKiI,YAAYU,EAAmBtB,EAAYa,WAG3BtK,KAAKyK,SAASzK,KAAKqJ,WAAYjH,G,yDAKhD6I,EAAejL,KAAKyK,SAASzK,KAAKoJ,SAAUhH,KAChC,cAEkC6I,EAFlC,GAEPf,EAFO,KAESgB,EAFT,KAGT9I,EAAKkI,SAAWJ,EAAeI,WAC9BtK,KAAKoJ,SAASO,OAAOuB,EAAuB,GAC5ClL,KAAKoJ,SAASQ,KAAKxH,MAIvB2H,EAAiBH,KAAKxH,GACtBpC,KAAKoJ,SAASQ,KAAKxH,I,kRAK3BpC,KAAKoJ,SAAS+B,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMd,SAASe,EAAMf,YAG1DtK,KAAKR,cAAc,IAAIC,YAAY,gBAAiB,CAACC,OAAQ,CACzD+J,cACAM,mBACAI,kBAAmBnK,KAAKqJ,WAAWrB,OAAO,GAAKhI,KAAKqJ,WAAWrJ,KAAKqJ,WAAWrB,OAAO,QAGvFhI,KAAKmB,U,kCACEsE,EAAM,EAAEzF,KAAKmB,UAAU,K,+JArGPtC,G,YCClC,WAAY0J,EAAOC,EAAKlE,GAAM,IAAD,8BACzB,+CASJmE,aAAe,SAAAtH,GAAS,OAAI,EAAKA,UAAYA,GAVhB,EAW7B0H,cAAgB,SAAAC,GAAY,OAAI,EAAK5H,WAAatC,EAAWkK,IAXhC,EAa7BwC,aAAe,SAAAlJ,GAAI,OAAI,EAAKmJ,eAAeC,MAAK,SAAA3E,GAAC,OAAIA,EAAEsB,MAAM/F,OAXzD,EAAKyC,cAAL,YAAyB9C,GAAzB,YAAiCwG,IACjC,EAAKjE,KAAO2E,KAAKC,MAAMD,KAAKE,UAAU7E,IACtC,EAAKmH,MAAQ,CAAC,EAAK5G,eACnB,EAAK0G,eAAiB,CAAC,EAAK1G,eAC5B,EAAKwE,WAAa,GAClB,EAAKR,cAAc,GAPM,E,kNAgBnB7I,KAAKyL,MAAMzD,O,oBAETyB,EAAczJ,KAAKyL,MAAMX,QAC7B9K,KAAKqJ,WAAWO,KAAKH,GAG0B,IAA5CzJ,KAAKsE,KAAKmF,EAAYtF,GAAGsF,EAAYvF,G,gBAEpC,IADIoB,EAAO,GACLmE,GACFnE,EAAKsE,KAAK,CAACH,EAAYvF,EAAGuF,EAAYtF,IACtCsF,EAAcA,EAAYe,O,yBAEvB/G,QAAQC,QAAQ4B,I,OAIvBoG,EAAqB,G,+BACV1L,KAAKkB,W,sEAAZ4I,E,QAEA5F,EAAIuF,EAAYvF,EAAE4F,EAAI,GACtB3F,EAAIsF,EAAYtF,EAAE2F,EAAI,KAGvB5F,EAAI,GAAKC,EAAI,GACbD,GAAKlE,KAAKsE,KAAK,GAAG0D,QAAU7D,GAAKnE,KAAKsE,KAAK0D,QACvB,IAApBhI,KAAKsE,KAAKH,GAAGD,I,wDAGVyH,EAAU,IAAI5J,GAAKmC,EAAGC,GAExBnE,KAAKsL,aAAaK,KAClBA,EAAQnB,OAASf,EACjBiC,EAAmB9B,KAAK+B,GACxB3L,KAAKuL,eAAe3B,KAAK+B,GACzB3L,KAAKyL,MAAM7B,KAAK+B,I,kRAKxB3L,KAAKR,cAAc,IAAIC,YAAY,gBAAiB,CAACC,OAAQ,CACzDyK,kBAAmBV,EACnBM,iBAAkB2B,OAGnB1L,KAAKmB,U,kCACEsE,EAAM,EAAEzF,KAAKmB,UAAU,K,+JA9DHtC,G,YCCtC,WAAY0J,EAAOC,EAAKlE,GAAM,IAAD,8BACzB,+CASJmE,aAAe,SAAAtH,GAAS,OAAI,EAAKA,UAAYA,GAVhB,EAW7B0H,cAAgB,SAAAC,GAAY,OAAI,EAAK5H,WAAatC,EAAWkK,IAXhC,EAa7BwC,aAAe,SAAAlJ,GAAI,OAAI,EAAKmJ,eAAeC,MAAK,SAAA3E,GAAC,OAAIA,EAAEsB,MAAM/F,OAXzD,EAAKyC,cAAL,YAAyB9C,GAAzB,YAAiCwG,IACjC,EAAKjE,KAAO2E,KAAKC,MAAMD,KAAKE,UAAU7E,IACtC,EAAKsH,MAAQ,CAAC,EAAK/G,eACnB,EAAK0G,eAAiB,CAAC,EAAK1G,eAC5B,EAAKwE,WAAa,GAClB,EAAKR,cAAc,GAPM,E,kNAgBnB7I,KAAK4L,MAAM5D,O,oBAETyB,EAAczJ,KAAK4L,MAAMC,MAC7B7L,KAAKqJ,WAAWO,KAAKH,GAG0B,IAA5CzJ,KAAKsE,KAAKmF,EAAYtF,GAAGsF,EAAYvF,G,gBAEpC,IADIoB,EAAO,GACLmE,GACFnE,EAAKsE,KAAK,CAACH,EAAYvF,EAAGuF,EAAYtF,IACtCsF,EAAcA,EAAYe,O,yBAEvB/G,QAAQC,QAAQ4B,I,OAIvBoG,EAAqB,G,+BACV1L,KAAKkB,W,sEAAZ4I,E,QAEA5F,EAAIuF,EAAYvF,EAAE4F,EAAI,GACtB3F,EAAIsF,EAAYtF,EAAE2F,EAAI,KAGvB5F,EAAI,GAAKC,EAAI,GACbD,GAAKlE,KAAKsE,KAAK,GAAG0D,QAAU7D,GAAKnE,KAAKsE,KAAK0D,QACvB,IAApBhI,KAAKsE,KAAKH,GAAGD,I,wDAGVyH,EAAU,IAAI5J,GAAKmC,EAAGC,GAExBnE,KAAKsL,aAAaK,KAClBA,EAAQnB,OAASf,EACjBiC,EAAmB9B,KAAK+B,GACxB3L,KAAKuL,eAAe3B,KAAK+B,GACzB3L,KAAK4L,MAAMhC,KAAK+B,I,kRAKxB3L,KAAKR,cAAc,IAAIC,YAAY,gBAAiB,CAACC,OAAQ,CACzDyK,kBAAmBV,EACnBM,iBAAkB2B,OAGnB1L,KAAKmB,U,kCACEsE,EAAM,EAAEzF,KAAKmB,UAAU,K,+JA9DLtC,ICKnBiN,G,2MACjBjM,MAAQ,CAACN,QAASO,EAAkBP,S,EACpC+E,KAAO9D,IAAMuL,Y,EAEbnI,cAAgB,SAAAC,GAAK,MAAI,CAACA,EAAM,EAAKhE,MAAMiE,QAASC,KAAKC,MAAMH,EAAM,EAAKhE,MAAMiE,W,EAChFG,cAAgB,gBAAEC,EAAF,EAAEA,EAAF,SAAIC,EAAS,EAAKtE,MAAMiE,QAAQI,G,EAEhD8H,oBAAsB,YAAe,IAAbtM,EAAY,EAAZA,OACbqK,EAAuCrK,EAAvCqK,iBAAkBI,EAAqBzK,EAArByK,kBASzB,GAAGJ,EAAiB,CAAC,IAAD,uBAChB,IAAI,IAAJ,IAAoBA,EAApB,+CAAqC,CAAC,IAA9BkC,EAA6B,QAC3BC,EAAgB,EAAKjI,cAAcgI,GACzC,EAAK3H,KAAKuF,QAAQnF,MAAMwH,GAAetK,IAAIhE,EAAOO,MAClD,EAAKmG,KAAKuF,QAAQ/D,eAAeoG,EAAetO,EAAOO,OAJ3C,mFASpB,GAAGgM,EAAkB,CACjB,IAAMgC,EAAkB,EAAKlI,cAAckG,GAC3C,EAAK7F,KAAKuF,QAAQnF,MAAMyH,GAAiBvK,IAAIhE,EAAOQ,QACpD,EAAKkG,KAAKuF,QAAQ/D,eAAeqG,EAAiBvO,EAAOQ,U,EAIjEgO,cAAgB,WACZ,EAAK9H,KAAKuF,QAAQ9E,cAElB,IAAMT,EAAO,EAAKA,KAAKuF,QAAQvF,KACzBO,EAAgB,EAAKjB,cAAc,EAAKU,KAAKuF,QAAQhF,eACrDC,EAAc,EAAKlB,cAAc,EAAKU,KAAKuF,QAAQ/E,aAErDuH,EAAa,IAAIC,GAAW5J,EAAiBhC,SAASC,UAAUG,OAAO+D,EAAeC,EAAaR,GAEpG+H,EAAW3D,cACV2D,EAAW3D,aAAahG,EAAiBhC,SAASO,UAAUH,OAChEuL,EAAWxD,cAAcnG,EAAiBhC,SAASQ,WAAWJ,OAC9DuL,EAAW5D,aAAa/F,EAAiBhC,SAASS,UAAUL,OAC5DuL,EAAW1M,iBAAiB,gBAAiB,EAAKqM,qBAElDK,EAAWE,WAAWC,MAAK,SAAAlH,GACvB+G,EAAWI,oBAAoB,gBAAiB,EAAKT,qBAClD1G,EAEC,EAAKhB,KAAKuF,QAAQxE,SAASC,GAG3BoH,MAAM,wB,mFAKE,IAAD,OACf1M,KAAKD,SAAS,CACV+D,QAASC,KAAKC,MAAMhE,KAAK2M,YAAYC,YAAclK,EAAiBhC,SAASW,SAASP,OACtFuD,KAAMN,KAAKC,MAAMhE,KAAK2M,YAAYE,aAAenK,EAAiBhC,SAASW,SAASP,SAExF4B,EAAiB/C,iBAAiB,kBAAkB,kBAAM,EAAKI,SAAS,CACpE+D,QAASC,KAAKC,MAAM,EAAK2I,YAAYC,YAAclK,EAAiBhC,SAASW,SAASP,OACtFuD,KAAMN,KAAKC,MAAM,EAAK2I,YAAYE,aAAenK,EAAiBhC,SAASW,SAASP,YAExF4B,EAAiB/C,iBAAiB,aAAcK,KAAKoM,eACrDtM,EAAkBH,iBAAiB,kBAAkB,gBAAED,EAAF,EAAEA,OAAF,OAAc,EAAKK,SAAS,CAACR,QAASG,EAAOH,e,+BAG7F,IAAD,OACJ,OACI,yBAAKW,UAAU,MAAMiD,MAAO,CAAC2J,QAAS9M,KAAKH,MAAMN,QAAU,QAAU,KACjE,kBAAC,EAAD,KACI,kBAAC,EAAD,OAEJ,0BAAMW,UAAU,SACZ,yBAAKA,UAAU,eAAeqD,IAAK,SAAAA,GAAG,OAAI,EAAKoJ,YAAcpJ,IACxDvD,KAAKH,MAAMiE,SAAW9D,KAAKH,MAAMwE,KAAO,kBAAC,EAAD,CACrCP,QAAS9D,KAAKH,MAAMiE,QACpBO,KAAMrE,KAAKH,MAAMwE,KACjBd,IAAKvD,KAAKsE,OACT,Y,GArFI9D,IAAMC,W,MCJvCsM,IAASC,OAAO,kBAAC,GAAD,MAAQjO,SAASkO,eAAe,W","file":"static/js/main.e8e5c69f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chevron_right-24px.9212f476.svg\";","module.exports = __webpack_public_path__ + \"static/media/highlight_off-24px.81471c4b.svg\";","import Arrow from \"../assets/icons/chevron_right-24px.svg\"\nimport Cross from \"../assets/icons/highlight_off-24px.svg\"\n\nexport const DEBUG_MODE = false\n\nexport const NODE_BORDER_WIDTH = 1\nexport const MAX_WIDTH_FOR_LAYOUT_CHANGE = 700\n\nexport const ROWS_CONSTRAINT = 50\nexport const COLUMNS_CONSTRAINT = 50\n\nexport const STATES = {\n    WALKABLE: 0,\n    BLOCKED: 1,\n    START: 2,\n    END: 3,\n    PATH: 4,\n    CURRENT: 5,\n    OPEN: 6,\n    CLOSED: 7\n}\n\nconst Color = c => [\"Color\", c]\nconst Image = img => [\"Image\", img]\n\nexport const BACKGROUNDS = {\n    [STATES.WALKABLE]: Color(\"white\"),\n    [STATES.BLOCKED]: Color(\"#2c3e50\"),\n    [STATES.START]: Image(`url(${Arrow})`),\n    [STATES.END]: Image(`url(${Cross})`),\n    [STATES.PATH]: Color(\"#2ecc71\"),\n    [STATES.CURRENT]: Color(\"#f1c40f\"),\n    [STATES.OPEN]: Color(\"#1abc9c\"),\n    [STATES.CLOSED]: Color(\"#16a085\")\n}\n\nexport const Directions = [\n    // Up, Down, Left, Right\n    [\n                  [0, -1],\n        [-1,  0],          [1,  0],\n                  [0,  1]\n    ],\n    // All Directions\n    [\n        [-1, -1], [0, -1], [1, -1],\n        [-1,  0],          [1,  0],\n        [-1,  1], [0,  1], [1,  1]\n    ]\n]\n","// Source: https://stackoverflow.com/questions/22186467/how-to-use-javascript-eventtarget\r\nexport default class Emitter {\r\n  constructor() {\r\n    var delegate = document.createDocumentFragment();\r\n    [\r\n      'addEventListener',\r\n      'dispatchEvent',\r\n      'removeEventListener'\r\n    ].forEach(f =>\r\n      this[f] = (...xs) => delegate[f](...xs)\r\n    )\r\n  }\r\n}\r\n","import Emitter from \"./Emitter.js\"\r\nimport {MAX_WIDTH_FOR_LAYOUT_CHANGE} from \"../config/constants.js\"\r\n\r\nclass ScreenSizeTracker extends Emitter{\r\n    constructor(maxWidth){\r\n        super()\r\n        this.maxWidth = maxWidth\r\n        this.isSmall = window.innerWidth<this.maxWidth\r\n        window.addEventListener(\"resize\", this.handleResize)\r\n    }\r\n\r\n    handleResize = () => {\r\n        if(window.innerWidth < MAX_WIDTH_FOR_LAYOUT_CHANGE && !this.isSmall){\r\n            this.isSmall = true\r\n            this.dispatchEvent(new CustomEvent(\"onBoundaryPass\", {detail: {isSmall: this.isSmall}}))\r\n        }else if(window.innerWidth > MAX_WIDTH_FOR_LAYOUT_CHANGE && this.isSmall){\r\n            this.isSmall = false\r\n            this.dispatchEvent(new CustomEvent(\"onBoundaryPass\", {detail: {isSmall: this.isSmall}}))\r\n        }\r\n    }\r\n}\r\n\r\nexport default new ScreenSizeTracker(MAX_WIDTH_FOR_LAYOUT_CHANGE)\r\n","import React from \"react\"\r\nimport {ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Typography} from \"@material-ui/core\"\r\n\r\nimport ScreenSizeTracker from \"../utils/ScreenSizeTracker.js\"\r\n\r\nexport default class Sidebar extends React.Component{\r\n    state = {isSmall: ScreenSizeTracker.isSmall}\r\n\r\n    componentDidMount(){\r\n        ScreenSizeTracker.addEventListener(\"onBoundaryPass\", ({detail}) => this.setState({isSmall: detail.isSmall}))\r\n    }\r\n\r\n    render(){\r\n        if(!this.state.isSmall){\r\n            return (\r\n                <aside className=\"sidebar\">\r\n                    {this.props.children}\r\n                </aside>\r\n            )\r\n        }else{\r\n            return(\r\n                <ExpansionPanel className=\"expansion-panel\">\r\n                    <ExpansionPanelSummary>\r\n                        <Typography>Settings</Typography>\r\n                    </ExpansionPanelSummary>\r\n                    <ExpansionPanelDetails>\r\n                        {this.props.children}\r\n                    </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n            )\r\n        }\r\n    }\r\n}\r\n","import Emitter from \"./Emitter.js\"\r\nimport {STATES} from \"../config/constants.js\"\r\n\r\nclass SettingsProvider extends Emitter{\r\n    settings = {\r\n        algorithm: {\r\n            type: \"select\",\r\n            label: \"Algorithm\",\r\n            value: 0,\r\n            options: [\r\n                {\r\n                    label: \"A*\",\r\n                    value: 0\r\n                },\r\n                {\r\n                    label: \"Dijkstra\",\r\n                    value: 1\r\n                },\r\n                {\r\n                    label: \"Breadth First\",\r\n                    value: 2\r\n                },\r\n                {\r\n                    label: \"Depth First\",\r\n                    value: 3\r\n                }\r\n            ]\r\n        },\r\n\r\n        gridSetterState: {\r\n            type: \"select\",\r\n            label: \"Element to deploy\",\r\n            value: STATES.BLOCKED,\r\n            options: [\r\n                {\r\n                    label: \"Wall\",\r\n                    value: STATES.BLOCKED\r\n                },\r\n                {\r\n                    label: \"Start\",\r\n                    value: STATES.START\r\n                },\r\n                {\r\n                    label: \"End\",\r\n                    value: STATES.END\r\n                }\r\n            ]\r\n        },\r\n\r\n        heuristic: {\r\n            type: \"select\",\r\n            label: \"Heuristic\",\r\n            value: 0,\r\n            options: [\r\n                {\r\n                    label: \"Manhattan\",\r\n                    value: 0\r\n                },\r\n                {\r\n                    label: \"Diagonal\",\r\n                    value: 1\r\n                },\r\n                {\r\n                    label: \"Euclidean\",\r\n                    value: 2\r\n                },\r\n            ]\r\n        },\r\n\r\n        directions: {\r\n            type: \"select\",\r\n            label: \"Allowed directions\",\r\n            value: 0,\r\n            options: [\r\n                {\r\n                    label: \"Up | Down | Left | Right\",\r\n                    value: 0\r\n                },\r\n                {\r\n                    label: \"Allow Diagonal\",\r\n                    value: 1\r\n                }\r\n            ]\r\n        },\r\n\r\n        framerate: {\r\n            type: \"number\",\r\n            value: 50,\r\n            step: 10,\r\n            label: \"Framerate\"\r\n        },\r\n\r\n        nodeSize: {\r\n            type: \"number\",\r\n            value: 50,\r\n            min: 10,\r\n            max: 150,\r\n            step: 10,\r\n            label: \"Node Size\"\r\n        },\r\n\r\n        clearGrid: {\r\n            type: \"action\",\r\n            color: \"secondary\",\r\n            variant: \"outlined\",\r\n            label: \"Clear Grid\"\r\n        },\r\n\r\n        searchPath: {\r\n            type: \"action\",\r\n            color: \"primary\",\r\n            variant: \"contained\",\r\n            label: \"Search Path\"\r\n        },\r\n    }\r\n\r\n    set = (key, value) => {\r\n        this.settings[key].value = value\r\n        this.dispatchEvent(new CustomEvent(key+\"Change\", {detail: this.settings[key].value}))\r\n    }\r\n\r\n    invoke = key => this.dispatchEvent(new CustomEvent(key))\r\n}\r\n\r\nexport default new SettingsProvider()\r\n","import React from \"react\"\r\nimport {STATES, BACKGROUNDS, NODE_BORDER_WIDTH} from \"../config/constants.js\"\r\nimport SettingsProvider from \"../utils/SettingsProvider.js\"\r\n\r\nexport default class Node extends React.Component{\r\n    state = {state: this.props.state}\r\n\r\n    toggle = key => {\r\n        if(this.throttle) return\r\n        if(this.state.state === key){\r\n            this.setState({state: STATES.WALKABLE})\r\n        }else{\r\n            this.setState({state: key})\r\n        }\r\n    }\r\n\r\n    set = key => {\r\n        if(this.state.state !== STATES.START && this.state.state !== STATES.END){\r\n            this.setState({state: key})\r\n        }\r\n    }\r\n\r\n    reset = () => this.setState({state: STATES.WALKABLE})\r\n\r\n    setState(newState){\r\n        super.setState(newState)\r\n        if(newState.state !== STATES.WALKABLE){\r\n            this.node.classList.add(\"animate\")\r\n            this.timeout = setTimeout(() => this.node.classList.remove(\"animate\"), 200)\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        SettingsProvider.addEventListener(\"nodeSizeChange\", () => this.forceUpdate())\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        if(this.timeout){\r\n            clearTimeout(this.timeout)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let background = BACKGROUNDS[this.state.state], backgroundImage, backgroundColor\r\n\r\n        if(background[0] === \"Image\"){\r\n            backgroundImage = background[1]\r\n            backgroundColor = BACKGROUNDS[STATES.PATH][1]\r\n        }else if(background[0] === \"Color\"){\r\n            backgroundColor = background[1]\r\n        }\r\n\r\n        return(\r\n            <div\r\n                className=\"node-border\"\r\n                onMouseEnter={this.props.onMouseEnter}\r\n                onMouseDown={this.props.onClick}\r\n            >\r\n                <div\r\n                    className=\"node\"\r\n                    style={{\r\n                        width: SettingsProvider.settings.nodeSize.value-NODE_BORDER_WIDTH*2+\"px\",\r\n                        height: SettingsProvider.settings.nodeSize.value-NODE_BORDER_WIDTH*2+\"px\",\r\n                        backgroundImage,\r\n                        backgroundColor\r\n                    }}\r\n                    ref={ref => this.node = ref}\r\n                >{this.props.children}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default t => new Promise(resolve => setTimeout(resolve, t))\r\n","import React from \"react\"\r\n\r\nimport Node from \"./Node.js\"\r\nimport {STATES, DEBUG_MODE, ROWS_CONSTRAINT, COLUMNS_CONSTRAINT} from \"../config/constants.js\"\r\nimport SettingsProvider from \"../utils/SettingsProvider.js\"\r\nimport sleep from \"../utils/sleep.js\"\r\n\r\nexport default class Grid extends React.Component{\r\n    static draggableStates = [STATES.WALKABLE, STATES.BLOCKED]\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.createNewGrid()\r\n        this.setterState = STATES.BLOCKED\r\n        this.nodes = []\r\n        this.isMouseDown = false\r\n        this.firstSetterState = null\r\n    }\r\n\r\n    indexToCoords = index => [index%this.props.columns, Math.floor(index/this.props.columns)]\r\n    coordsToIndex = ({x,y}) => y*this.props.columns+x\r\n\r\n    createNewGrid = () => {\r\n        this.clearGrid()\r\n        const rows = Math.min(this.props.rows, ROWS_CONSTRAINT)\r\n        const columns = Math.min(this.props.columns, COLUMNS_CONSTRAINT)\r\n        this.grid = Array(rows).fill(0).map(() => Array(columns).fill(STATES.WALKABLE))\r\n    }\r\n\r\n    clearGrid = () => {\r\n        if(this.nodes){\r\n            this.nodes.forEach(node => node && node.reset())\r\n            this.grid = this.grid.map(column => column.map(cell => cell = STATES.WALKABLE))\r\n            this.startingPoint = null\r\n            this.endingPoint = null\r\n        }\r\n    }\r\n\r\n    initNewPath = () => {\r\n        const shouldReset = [STATES.PATH, STATES.CURRENT, STATES.OPEN, STATES.CLOSED]\r\n        this.grid = this.grid.map((column, y) => column.map(((cell, x) => {\r\n            const index = this.coordsToIndex({x,y})\r\n            if(index === this.startingPoint)\r\n                return STATES.START\r\n            if(index === this.endingPoint)\r\n                return STATES.END\r\n            if(shouldReset.includes(cell)){\r\n                this.nodes[index].reset()\r\n                return STATES.WALKABLE\r\n            }\r\n            return cell\r\n        })))\r\n    }\r\n\r\n    generateStartingPoint = () => {\r\n        if(this.props.columns > COLUMNS_CONSTRAINT || this.props.rows > ROWS_CONSTRAINT) return\r\n        const x = Math.floor(this.props.columns*.2)\r\n        const y = Math.floor(this.props.rows/2)\r\n        this.startingPoint = this.coordsToIndex({x, y})\r\n        this.toggleGridAtIndex(this.startingPoint, STATES.START)\r\n    }\r\n\r\n    generateEndingPoint = () => {\r\n        if(this.props.columns > COLUMNS_CONSTRAINT || this.props.rows > ROWS_CONSTRAINT) return\r\n        const x = Math.floor(this.props.columns*.8)\r\n        const y = Math.floor(this.props.rows/2)\r\n        this.endingPoint = this.coordsToIndex({x, y})\r\n        this.toggleGridAtIndex(this.endingPoint, STATES.END)\r\n    }\r\n\r\n    toggleGridAtIndex(index, value){\r\n        const coords = this.indexToCoords(index)\r\n        this.nodes[index].toggle(value)\r\n        if(this.grid[coords[1]][coords[0]] === parseInt(value)){\r\n            this.grid[coords[1]][coords[0]] = STATES.WALKABLE\r\n        }else{\r\n            this.grid[coords[1]][coords[0]] = parseInt(value)\r\n        }\r\n    }\r\n\r\n    setGridAtIndex(index, value){\r\n        const coords = this.indexToCoords(index)\r\n        this.grid[coords[1]][coords[0]] = value\r\n        this.nodes[index].set(value)\r\n    }\r\n\r\n    showPath = async path => {\r\n        for(let point of path){\r\n            this.grid[point[1]][point[0]] = 4\r\n            this.nodes[this.coordsToIndex({x:point[0], y:point[1]})].set(STATES.PATH)\r\n            await sleep(1/SettingsProvider.settings.framerate.value*1000)\r\n        }\r\n    }\r\n\r\n    handleClick = (index, isMouseEnter = false) => {\r\n        const set = (index, state) => {\r\n            if(!isMouseEnter){\r\n                this.toggleGridAtIndex(index, state)\r\n            }else if(Grid.draggableStates.includes(state)){\r\n                if(this.firstSetterState === null){\r\n                    this.firstSetterState = this.nodes[index].state.state !== STATES.BLOCKED\r\n                }\r\n                if(this.firstSetterState){\r\n                    this.setGridAtIndex(index, state)\r\n                }else{\r\n                    this.setGridAtIndex(index, STATES.WALKABLE)\r\n                }\r\n            }\r\n        }\r\n\r\n        if(this.setterState === STATES.START){\r\n            if(this.startingPoint){\r\n                set(this.startingPoint, STATES.START)\r\n            }\r\n            this.startingPoint = index\r\n        } else if(this.setterState === STATES.END){\r\n            if(this.endingPoint){\r\n                set(this.endingPoint, STATES.END)\r\n            }\r\n            this.endingPoint = index\r\n        }\r\n        set(index, this.setterState)\r\n    }\r\n\r\n    handleMouseEnter = index => {\r\n        if(this.isMouseDown){\r\n            this.handleClick(index, true)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.generateStartingPoint()\r\n        this.generateEndingPoint()\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener(\"mousedown\", () => this.isMouseDown = true, true)\r\n        document.addEventListener(\"mouseup\", () => {\r\n            this.firstSetterState = null\r\n            this.isMouseDown = false\r\n        })\r\n\r\n        SettingsProvider.addEventListener(\"gridSetterStateChange\", ({detail}) => this.setterState = parseInt(detail))\r\n        SettingsProvider.addEventListener(\"nodeSizeChange\", () => this.forceUpdate())\r\n        SettingsProvider.addEventListener(\"clearGrid\", this.clearGrid)\r\n\r\n        this.generateStartingPoint()\r\n        this.generateEndingPoint()\r\n    }\r\n\r\n    render(){\r\n        this.createNewGrid()\r\n        return(\r\n            <div\r\n                className=\"grid\"\r\n                ref={ref => this.gridRef = ref}\r\n                style={{width: this.props.columns*SettingsProvider.settings.nodeSize.value}}\r\n            >\r\n                {this.grid.flat().map((state, i) => (\r\n                    <Node\r\n                        state={state}\r\n                        key={i}\r\n                        onClick={() => this.handleClick(i)}\r\n                        ref={ref => this.nodes[i] = ref}\r\n                        onMouseEnter={() => this.handleMouseEnter(i)}\r\n                    >{DEBUG_MODE && `(${this.indexToCoords(i).join(\"|\")})`}</Node>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport {FormControl, InputLabel, Select, MenuItem, Button, Input, Slider, Grid} from \"@material-ui/core\"\r\n\r\nimport SettingsProvider from \"../utils/SettingsProvider.js\"\r\n\r\nexport default class Settings extends React.Component{\r\n    state = {}\r\n\r\n    getDOMElement = key => {\r\n        const setting = SettingsProvider.settings[key]\r\n\r\n        switch(setting.type){\r\n            case \"select\":\r\n                return(\r\n                    <>\r\n                        <InputLabel>{setting.label}</InputLabel>\r\n                        <Select\r\n                            value={this.state[key]}\r\n                            onChange={e => this.handleChange(e, key)}\r\n                            className=\"input\"\r\n                        >\r\n                            {setting.options.map(option => (\r\n                                <MenuItem value={option.value} key={option.label}>{option.label}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </>\r\n                )\r\n\r\n            case \"action\":\r\n                return (\r\n                    <Button\r\n                        className=\"input\"\r\n                        variant={setting.variant}\r\n                        color={setting.color}\r\n                        onClick={() => SettingsProvider.invoke(key)}\r\n                    >{setting.label}</Button>\r\n                )\r\n\r\n            case \"number\":\r\n                return (\r\n                    <>\r\n                        <InputLabel>{setting.label}</InputLabel>\r\n                        <Grid container spacing={2} className=\"slider-wrapper\">\r\n                            <Grid item xs>\r\n                                <Slider\r\n                                    value={this.state[key]}\r\n                                    onChange={(e, newValue) => this.handleChange({target: {value: newValue}}, key)}\r\n                                    step={1}\r\n                                    min={setting.min}\r\n                                    max={setting.max}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Input\r\n                                    label={setting.label}\r\n                                    value={this.state[key]}\r\n                                    onChange={e => this.handleChange(e, key)}\r\n                                    margin=\"dense\"\r\n                                    style={{width: 42}}\r\n                                    inputProps={{\r\n                                        step: setting.step,\r\n                                        type: \"number\"\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                )\r\n\r\n            default:\r\n                throw new Error(\"Unsupported setting type: \"+setting.type)\r\n        }\r\n    }\r\n\r\n    handleChange = (e, key) => {\r\n        SettingsProvider.set(key, e.target.value)\r\n        this.setState({[key]: e.target.value})\r\n    }\r\n\r\n    componentDidMount(){\r\n        let newState = {}\r\n        Object.entries(SettingsProvider.settings).forEach(([key, setting]) => {\r\n            if(setting.type === \"select\" || setting.type === \"number\"){\r\n                newState[key] = setting.value\r\n            }\r\n        })\r\n        this.setState(newState)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"settings\">\r\n                {Object.keys(this.state).length && Object.keys(SettingsProvider.settings).map(key => (\r\n                    <div className=\"input-wrapper\" key={key}>\r\n                        <FormControl className=\"input\">\r\n                            {this.getDOMElement(key)}\r\n                        </FormControl>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default class Node{\r\n    constructor(x, y, parentNode = null){\r\n        this.x = x\r\n        this.y = y\r\n\r\n        this.g = 0\r\n        this.h = 0\r\n        this.f = 0\r\n\r\n        this.parentNode = parentNode\r\n    }\r\n\r\n    equal = node => this.x === node.x && this.y === node.y\r\n}\r\n","import Emitter from \"../../utils/Emitter.js\"\r\nimport sleep from \"../../utils/sleep.js\"\r\nimport {Directions} from \"../../config/constants.js\"\r\nimport Node from \"./Node.js\"\r\n\r\nexport default class AStar extends Emitter{\r\n    static heuristics = [\r\n        // Manhattan Distance\r\n        (currentNode, endNode) => Math.abs(currentNode.x-endNode.x)+Math.abs(currentNode.y-endNode.y),\r\n        // Diagonal Distance\r\n        (currentNode, endNode) => Math.max(Math.abs(currentNode.x-endNode.x),Math.abs(currentNode.y-endNode.y)),\r\n        // Euclidean Distance\r\n        (currentNode, endNode) => ((currentNode.x-endNode.x)**2+(currentNode.y-endNode.y)**2)**(1/2)\r\n    ]\r\n\r\n    constructor(start, end, grid){\r\n        super()\r\n        this.startNode = new Node(...start)\r\n        this.endNode = new Node(...end)\r\n        this.grid = JSON.parse(JSON.stringify(grid))\r\n        this.openList = [this.startNode]\r\n        this.closedList = []\r\n\r\n        this.setHeuristic(0)\r\n        this.setDirections(0)\r\n    }\r\n\r\n    setFramerate = framerate => this.framerate = framerate\r\n    setHeuristic = heuristicNr => this.heuristic = AStar.heuristics[heuristicNr]\r\n    setDirections = directionsNr => this.directions = Directions[directionsNr]\r\n\r\n    getNodeInList(list, node){\r\n        return list.find(nodeInList => nodeInList.equal(node))\r\n    }\r\n\r\n    async findPath(){\r\n        while(this.openList.length){\r\n            // Find the node with least f in the open list\r\n            let currentNode = this.openList[0]\r\n            let currentNodeIndex = 0\r\n            for(let i = 0; i < this.openList.length; i++){\r\n                if(this.openList[i].f < currentNode.f){\r\n                    currentNode = this.openList[i]\r\n                    currentNodeIndex = i\r\n                }\r\n            }\r\n\r\n            // Remove currentNode from the open list and add it to the closed list\r\n            this.openList.splice(currentNodeIndex, 1)\r\n            this.closedList.push(currentNode)\r\n\r\n            // Found the goal\r\n            if(currentNode.equal(this.endNode)){\r\n                // Follow the path to the starting node, beginning from the end node\r\n                let path = []\r\n                let current = currentNode\r\n                while(current){\r\n                    path.push([current.x, current.y])\r\n                    current = current.parentNode\r\n                }\r\n                return Promise.resolve(path)\r\n            }\r\n\r\n            // Generate currentNode's adjacent nodes and set their parents to currentNode\r\n            let children = []\r\n            // Check allowed nodes\r\n            for(let dir of this.directions){\r\n                // Apply dir to currentNodes position to get the new x, y\r\n                let x = currentNode.x+dir[0]\r\n                let y = currentNode.y+dir[1]\r\n\r\n                // Do not proceed if the node is not inside the grid\r\n                if(x < 0 || y < 0 ||\r\n                   x >= this.grid[0].length || y >= this.grid.length)\r\n                   continue\r\n\r\n                // Do not proceed if the node is not walkable\r\n                if(this.grid[y][x] === 1)\r\n                    continue\r\n\r\n                // Add new node to the children\r\n                children.push(new Node(x, y, currentNode))\r\n            }\r\n\r\n            const newOpenListNodes = []\r\n            for(let child of children){\r\n                // Child is already in the closed list\r\n                if(this.getNodeInList(this.closedList, child)){\r\n                    continue\r\n                }\r\n\r\n                // Create the g, h and f values\r\n                child.g = currentNode.g + 1\r\n                child.h = this.heuristic(child, this.endNode)\r\n                child.f = child.g + child.h\r\n\r\n                // Child is already in the open list\r\n                let nodeInOpenList = this.getNodeInList(this.openList, child)\r\n                if(nodeInOpenList && child.g >= nodeInOpenList.g){\r\n                    continue\r\n                }\r\n\r\n                // Add child to the open list\r\n                this.openList.push(child)\r\n                newOpenListNodes.push(child)\r\n            }\r\n\r\n            // Visualization bridge\r\n            this.dispatchEvent(new CustomEvent(\"nextIteration\", {detail: {\r\n                currentNode,\r\n                newOpenListNodes,\r\n                newClosedListNode: this.closedList.length>1 && this.closedList[this.closedList.length-2]\r\n            }}))\r\n\r\n            if(this.framerate){\r\n                await sleep(1/this.framerate*1000)\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default class Node{\r\n    constructor(x, y, parentNode){\r\n        this.x = x\r\n        this.y = y\r\n        this.parentNode = parentNode\r\n        this.distance = Infinity\r\n    }\r\n\r\n    setDistance = distance => this.distance = distance\r\n\r\n    equal = node => this.x === node.x && this.y === node.y\r\n}\r\n","export default class Node{\r\n    constructor(x, y){\r\n        this.x = x\r\n        this.y = y\r\n        this.parent = null\r\n    }\r\n\r\n    equal = node => node.x === this.x && node.y === this.y\r\n}\r\n","export default class Node{\r\n    constructor(x, y){\r\n        this.x = x\r\n        this.y = y\r\n        this.parent = null\r\n    }\r\n\r\n    equal = node => node.x === this.x && node.y === this.y\r\n}\r\n","import AStar from \"./AStar/AStar.js\"\r\nimport Dijkstra from \"./Dijkstra/Dijkstra.js\"\r\nimport BreadthFirst from \"./BreadthFirst/BreadthFirst.js\"\r\nimport DepthFirst from \"./DepthFirst/DepthFirst.js\"\r\n\r\nexport default [AStar, Dijkstra, BreadthFirst, DepthFirst]\r\n","import Emitter from \"../../utils/Emitter.js\"\r\nimport sleep from \"../../utils/sleep.js\"\r\nimport {Directions} from \"../../config/constants.js\"\r\nimport Node from \"./Node.js\"\r\n\r\nexport default class Dijkstra extends Emitter{\r\n    constructor(start, end, grid){\r\n        super()\r\n        this.startNode = new Node(...start)\r\n        this.startNode.setDistance(0)\r\n\r\n        this.priorityQueue = []\r\n        this.openList = [this.startNode]\r\n        this.closedList = []\r\n        this.grid = JSON.parse(JSON.stringify(grid))\r\n        console.log(this.grid)\r\n\r\n        this.setDirections(1)\r\n    }\r\n\r\n    setFramerate = framerate => this.framerate = framerate\r\n    setDirections = directionsNr => this.directions = Directions[directionsNr]\r\n\r\n    // Find the same node in the open list and return it and its index\r\n    isInList = (list, node) => {\r\n        for(let indexOfNodeInList in list){\r\n            let nodeInList = list[indexOfNodeInList]\r\n            if(nodeInList.equal(node)){\r\n                return [nodeInList, indexOfNodeInList]\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    async findPath(){\r\n        while(this.openList.length){\r\n            // Set the current node to the node with lowest distance in open list\r\n            let currentNode = this.openList[0]\r\n\r\n            // Move current node from openList to closedList\r\n            this.openList.shift()\r\n            this.closedList.push(currentNode)\r\n            console.log(currentNode, this.grid[currentNode.y][currentNode.x])\r\n            // Found the end node\r\n            if(this.grid[currentNode.y][currentNode.x] === 3){\r\n                let path = []\r\n                while(currentNode){\r\n                    path.push([currentNode.x, currentNode.y])\r\n                    currentNode = currentNode.parentNode\r\n                }\r\n                return Promise.resolve(path)\r\n            }\r\n\r\n            // Get the neighbours of the current node and put them into the open list if neccessary\r\n            let newOpenListNodes = []\r\n            for(let dir of this.directions){\r\n                // Apply dir to currentNodes position to get the new x, y\r\n                let x = currentNode.x+dir[0]\r\n                let y = currentNode.y+dir[1]\r\n\r\n                // Do not proceed if the node is not inside the grid\r\n                if(x < 0 || y < 0 ||\r\n                   x >= this.grid[0].length || y >= this.grid.length)\r\n                   continue\r\n\r\n                // Do not proceed if the node is not walkable\r\n                if(this.grid[y][x] === 1)\r\n                    continue\r\n\r\n                // Create the new node\r\n                let node = new Node(x, y, currentNode)\r\n                let relativeDistance = dir[0] && dir[1] ? Math.sqrt(2) : 1\r\n                node.setDistance(relativeDistance + currentNode.distance)\r\n\r\n                // Check if node is already in the closed list\r\n                let isInClosedList = this.isInList(this.closedList, node)\r\n                if(isInClosedList)\r\n                    continue\r\n\r\n                // Check if node is already in the open list\r\n                let isInOpenList = this.isInList(this.openList, node)\r\n                if(isInOpenList){\r\n                    // Replace same node in open list if distance is lower\r\n                    let [nodeInOpenList, indexOfNodeInOpenList] = isInOpenList\r\n                    if(node.distance < nodeInOpenList.distance){\r\n                        this.openList.splice(indexOfNodeInOpenList, 1)\r\n                        this.openList.push(node)\r\n                    }\r\n                }else{\r\n                    // Add node to the open list\r\n                    newOpenListNodes.push(node)\r\n                    this.openList.push(node)\r\n                }\r\n            }\r\n\r\n            // Sort the openList by distance\r\n            this.openList.sort((nodeA, nodeB) => nodeA.distance-nodeB.distance)\r\n\r\n            // Visualization bridge\r\n            this.dispatchEvent(new CustomEvent(\"nextIteration\", {detail: {\r\n                currentNode,\r\n                newOpenListNodes,\r\n                newClosedListNode: this.closedList.length>1 && this.closedList[this.closedList.length-2]\r\n            }}))\r\n\r\n            if(this.framerate){\r\n                await sleep(1/this.framerate*1000)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Emitter from \"../../utils/Emitter.js\"\r\nimport sleep from \"../../utils/sleep.js\"\r\nimport {Directions} from \"../../config/constants.js\"\r\nimport Node from \"./Node.js\"\r\n\r\nexport default class BreadthFirst extends Emitter{\r\n    constructor(start, end, grid){\r\n        super()\r\n        this.startingPoint = new Node(...start)\r\n        this.grid = JSON.parse(JSON.stringify(grid))\r\n        this.queue = [this.startingPoint]\r\n        this.discoveredList = [this.startingPoint]\r\n        this.closedList = []\r\n        this.setDirections(0)\r\n    }\r\n\r\n    setFramerate = framerate => this.framerate = framerate\r\n    setDirections = directionsNr => this.directions = Directions[directionsNr]\r\n\r\n    isDiscovered = node => this.discoveredList.some(e => e.equal(node))\r\n\r\n    async findPath(){\r\n        while(this.queue.length){\r\n            // Get and remove the node at the top of the queue\r\n            let currentNode = this.queue.shift()\r\n            this.closedList.push(currentNode)\r\n\r\n            // Found the goal\r\n            if(this.grid[currentNode.y][currentNode.x] === 3){\r\n                let path = []\r\n                while(currentNode){\r\n                    path.push([currentNode.x, currentNode.y])\r\n                    currentNode = currentNode.parent\r\n                }\r\n                return Promise.resolve(path)\r\n            }\r\n\r\n            // Get the neighbours of the current node\r\n            let newDiscoveredNodes = []\r\n            for(let dir of this.directions){\r\n                // Apply dir to currentNodes position to get the new x, y\r\n                let x = currentNode.x+dir[0]\r\n                let y = currentNode.y+dir[1]\r\n\r\n                // Do not proceed if the node is not valid\r\n                if(x < 0 || y < 0 ||\r\n                   x >= this.grid[0].length || y >= this.grid.length ||\r\n                   this.grid[y][x] === 1)\r\n                   continue\r\n\r\n                const newNode = new Node(x, y)\r\n                // Only proceed if the new node is not discovered already\r\n                if(!this.isDiscovered(newNode)){\r\n                    newNode.parent = currentNode\r\n                    newDiscoveredNodes.push(newNode)\r\n                    this.discoveredList.push(newNode)\r\n                    this.queue.push(newNode)\r\n                }\r\n            }\r\n\r\n            // Visualization bridge\r\n            this.dispatchEvent(new CustomEvent(\"nextIteration\", {detail: {\r\n                newClosedListNode: currentNode,\r\n                newOpenListNodes: newDiscoveredNodes\r\n            }}))\r\n\r\n            if(this.framerate){\r\n                await sleep(1/this.framerate*1000)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Emitter from \"../../utils/Emitter.js\"\r\nimport sleep from \"../../utils/sleep.js\"\r\nimport {Directions} from \"../../config/constants.js\"\r\nimport Node from \"./Node.js\"\r\n\r\nexport default class DepthFirst extends Emitter{\r\n    constructor(start, end, grid){\r\n        super()\r\n        this.startingPoint = new Node(...start)\r\n        this.grid = JSON.parse(JSON.stringify(grid))\r\n        this.stack = [this.startingPoint]\r\n        this.discoveredList = [this.startingPoint]\r\n        this.closedList = []\r\n        this.setDirections(0)\r\n    }\r\n\r\n    setFramerate = framerate => this.framerate = framerate\r\n    setDirections = directionsNr => this.directions = Directions[directionsNr]\r\n\r\n    isDiscovered = node => this.discoveredList.some(e => e.equal(node))\r\n\r\n    async findPath(){\r\n        while(this.stack.length){\r\n            // Get and remove the node at the top of the queue\r\n            let currentNode = this.stack.pop()\r\n            this.closedList.push(currentNode)\r\n\r\n            // Found the goal\r\n            if(this.grid[currentNode.y][currentNode.x] === 3){\r\n                let path = []\r\n                while(currentNode){\r\n                    path.push([currentNode.x, currentNode.y])\r\n                    currentNode = currentNode.parent\r\n                }\r\n                return Promise.resolve(path)\r\n            }\r\n\r\n            // Get the neighbours of the current node\r\n            let newDiscoveredNodes = []\r\n            for(let dir of this.directions){\r\n                // Apply dir to currentNodes position to get the new x, y\r\n                let x = currentNode.x+dir[0]\r\n                let y = currentNode.y+dir[1]\r\n\r\n                // Do not proceed if the node is not valid\r\n                if(x < 0 || y < 0 ||\r\n                   x >= this.grid[0].length || y >= this.grid.length ||\r\n                   this.grid[y][x] === 1)\r\n                   continue\r\n\r\n                const newNode = new Node(x, y)\r\n                // Only proceed if the new node is not discovered already\r\n                if(!this.isDiscovered(newNode)){\r\n                    newNode.parent = currentNode\r\n                    newDiscoveredNodes.push(newNode)\r\n                    this.discoveredList.push(newNode)\r\n                    this.stack.push(newNode)\r\n                }\r\n            }\r\n\r\n            // Visualization bridge\r\n            this.dispatchEvent(new CustomEvent(\"nextIteration\", {detail: {\r\n                newClosedListNode: currentNode,\r\n                newOpenListNodes: newDiscoveredNodes\r\n            }}))\r\n\r\n            if(this.framerate){\r\n                await sleep(1/this.framerate*1000)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from \"react\"\r\n\r\nimport {STATES} from \"./config/constants.js\"\r\nimport Sidebar from \"./components/Sidebar.js\"\r\nimport Grid from \"./components/Grid.js\"\r\nimport Settings from \"./components/Settings.js\"\r\nimport SettingsProvider from \"./utils/SettingsProvider.js\"\r\nimport ScreenSizeTracker from \"./utils/ScreenSizeTracker.js\"\r\nimport algorithms from \"./algorithms/AlgorithmProvider.js\"\r\n\r\nexport default class App extends React.Component{\r\n    state = {isSmall: ScreenSizeTracker.isSmall}\r\n    grid = React.createRef()\r\n\r\n    indexToCoords = index => [index%this.state.columns, Math.floor(index/this.state.columns)]\r\n    coordsToIndex = ({x,y}) => y*this.state.columns+x\r\n\r\n    handleNextIteration = ({detail}) => {\r\n        const {newOpenListNodes, newClosedListNode} = detail\r\n\r\n        // Show currentNode\r\n        // if(detail.currentNode){\r\n        //     const currentNodeIndex = this.coordsToIndex(detail.currentNode)\r\n        //     this.grid.current.nodes[currentNodeIndex].set(\"CURRENT\")\r\n        // }\r\n\r\n        // Show new openlist nodes\r\n        if(newOpenListNodes){\r\n            for(let openNode of newOpenListNodes){\r\n                const openNodeIndex = this.coordsToIndex(openNode)\r\n                this.grid.current.nodes[openNodeIndex].set(STATES.OPEN)\r\n                this.grid.current.setGridAtIndex(openNodeIndex, STATES.OPEN)\r\n            }\r\n        }\r\n\r\n        // Show new closed list node\r\n        if(newClosedListNode){\r\n            const closedNodeIndex = this.coordsToIndex(newClosedListNode)\r\n            this.grid.current.nodes[closedNodeIndex].set(STATES.CLOSED)\r\n            this.grid.current.setGridAtIndex(closedNodeIndex, STATES.CLOSED)\r\n        }\r\n    }\r\n\r\n    calculatePath = () => {\r\n        this.grid.current.initNewPath()\r\n\r\n        const grid = this.grid.current.grid\r\n        const startingPoint = this.indexToCoords(this.grid.current.startingPoint)\r\n        const endingPoint = this.indexToCoords(this.grid.current.endingPoint)\r\n\r\n        let pathFinder = new algorithms[SettingsProvider.settings.algorithm.value](startingPoint, endingPoint, grid)\r\n\r\n        if(pathFinder.setHeuristic)\r\n            pathFinder.setHeuristic(SettingsProvider.settings.heuristic.value)\r\n        pathFinder.setDirections(SettingsProvider.settings.directions.value)\r\n        pathFinder.setFramerate(SettingsProvider.settings.framerate.value)\r\n        pathFinder.addEventListener(\"nextIteration\", this.handleNextIteration)\r\n\r\n        pathFinder.findPath().then(path => {\r\n            pathFinder.removeEventListener(\"nextIteration\", this.handleNextIteration)\r\n            if(path){\r\n                // Show final path\r\n                this.grid.current.showPath(path)\r\n            }else{\r\n                // No path found\r\n                alert(\"There is no path\")\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            columns: Math.floor(this.gridWrapper.clientWidth / SettingsProvider.settings.nodeSize.value),\r\n            rows: Math.floor(this.gridWrapper.clientHeight / SettingsProvider.settings.nodeSize.value)\r\n        })\r\n        SettingsProvider.addEventListener(\"nodeSizeChange\", () => this.setState({\r\n            columns: Math.floor(this.gridWrapper.clientWidth / SettingsProvider.settings.nodeSize.value),\r\n            rows: Math.floor(this.gridWrapper.clientHeight / SettingsProvider.settings.nodeSize.value)\r\n        }))\r\n        SettingsProvider.addEventListener(\"searchPath\", this.calculatePath)\r\n        ScreenSizeTracker.addEventListener(\"onBoundaryPass\", ({detail}) => this.setState({isSmall: detail.isSmall}))\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"app\" style={{display: this.state.isSmall ? \"block\" : \"\"}}>\r\n                <Sidebar>\r\n                    <Settings/>\r\n                </Sidebar>\r\n                <main className=\"stage\">\r\n                    <div className=\"grid-wrapper\" ref={ref => this.gridWrapper = ref}>\r\n                        {this.state.columns && this.state.rows ? <Grid\r\n                            columns={this.state.columns}\r\n                            rows={this.state.rows}\r\n                            ref={this.grid}\r\n                        /> : null}\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from \"./App.js\"\nimport \"./index.scss\"\n\nReactDOM.render(<App/>, document.getElementById('root'))\n"],"sourceRoot":""}